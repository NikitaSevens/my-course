import dotenv from "dotenv";
import path from "path";
import express from "express";
import cors from "cors";
import nodemailer from "nodemailer";
import fs from "fs";
import { v4 as uuidv4 } from "uuid";
import { fileURLToPath } from "url";
import multer from "multer";
import {
  S3Client,
  GetObjectCommand,
  PutObjectCommand,
} from "@aws-sdk/client-s3";
import { Upload } from "@aws-sdk/lib-storage";
import { generateDocxFromTemplate } from "./utils/generateDocxFromTemplate.js";

dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const allowedOrigins = [
  "https://my-coursesask.netlify.app",
  "http://localhost:3000",
  "http://127.0.0.1:3000"
];

app.use(cors({
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) {
      return callback(null, true);
    } else {
      return callback(new Error("CORS –æ—à–∏–±–∫–∞: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"));
    }
  },
  methods: ["GET", "POST", "PUT", "DELETE"],
}));

app.use(express.json());

if (!process.env.S3_BUCKET) {
  throw new Error("S3_BUCKET is not defined");
}

const dataDir = path.join(__dirname, "data");
if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir);
const coursesFile = path.join(dataDir, "courses.json");

function streamToString(stream) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    stream.on("data", (chunk) => chunks.push(chunk));
    stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf-8")));
    stream.on("error", reject);
  });
}

async function loadCoursesFromS3() {
  try {
    const result = await s3.send(
      new GetObjectCommand({
        Bucket: process.env.S3_BUCKET,
        Key: "courses.json",
      })
    );
    const body = await streamToString(result.Body);
    return JSON.parse(body);
  } catch (err) {
    if (err.name === "NoSuchKey") return [];
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è courses.json –∏–∑ S3:", err);
    return [];
  }
}

async function saveCoursesToS3(courses) {
  try {
    await s3.send(
      new PutObjectCommand({
        Bucket: process.env.S3_BUCKET,
        Key: "courses.json",
        Body: JSON.stringify(courses, null, 2),
        ContentType: "application/json",
      })
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è courses.json –≤ S3:", err);
    throw err;
  }
}

// === S3 client ===
const s3 = new S3Client({
  endpoint: process.env.S3_ENDPOINT,
  region: process.env.S3_REGION,
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY,
    secretAccessKey: process.env.S3_SECRET_KEY,
  },
});

// === Multer memory storage ===
const upload = multer({ storage: multer.memoryStorage() });

// === Upload to S3 ===
const uploadToS3 = async (file, filename) => {
  const uploader = new Upload({
    client: s3,
    params: {
      Bucket: process.env.S3_BUCKET,
      Key: filename,
      Body: file.buffer,
      ACL: "public-read",
      ContentType: file.mimetype,
    },
  });

  await uploader.done();
  return `${process.env.S3_ENDPOINT}/${process.env.S3_BUCKET}/${filename}`;
};

// === POST /courses ===
app.post(
  "/courses",
  upload.fields([
    { name: "imageFile", maxCount: 1 },
    { name: "programFile", maxCount: 1 },
  ]),
  async (req, res) => {
    try {
      const data = req.body;
      const files = req.files;

      let imageUrl = "";
      let programUrl = "";

      if (files?.imageFile?.[0]) {
        const filename = `${uuidv4()}${path.extname(
          files.imageFile[0].originalname
        )}`;
        imageUrl = await uploadToS3(files.imageFile[0], filename);
      } else if (data.image) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
        imageUrl = data.image;
      }

      if (files?.programFile?.[0]) {
        const filename = `${uuidv4()}${path.extname(
          files.programFile[0].originalname
        )}`;
        programUrl = await uploadToS3(files.programFile[0], filename);
      }

      const newCourse = {
        id: uuidv4(),
        ...data,
        image: imageUrl,
        programFile: programUrl,
      };

      let courses = await loadCoursesFromS3();
      courses.push(newCourse);
      await saveCoursesToS3(courses);

      res.status(201).json({ message: "–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω", course: newCourse });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞:", err);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞" });
    }
  }
);

// === GET /courses ===
app.get("/courses", async (req, res) => {
  try {
    const courses = await loadCoursesFromS3();
    res.json(courses);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤" });
  }
});


// === DELETE /courses/:id ===
app.delete("/courses/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const courses = await loadCoursesFromS3();
    const filtered = courses.filter(course => course.id !== id);

    if (filtered.length === courses.length) {
      return res.status(404).json({ error: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    await saveCoursesToS3(filtered);
    res.json({ message: "–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞" });
  }
});


// === PUT /courses/:id ===
app.put(
  "/courses/:id",
  upload.fields([
    { name: "imageFile", maxCount: 1 },
    { name: "programFile", maxCount: 1 },
  ]),
  async (req, res) => {
    const { id } = req.params;
    const data = req.body;
    const files = req.files;

    try {
      let courses = await loadCoursesFromS3();
      const index = courses.findIndex(course => course.id === id);
      if (index === -1) return res.status(404).json({ error: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

      let imageUrl = courses[index].image;
      let programUrl = courses[index].programFile;

      if (files?.imageFile?.[0]) {
        const filename = `${uuidv4()}${path.extname(files.imageFile[0].originalname)}`;
        imageUrl = await uploadToS3(files.imageFile[0], filename);
      }

      if (files?.programFile?.[0]) {
        const filename = `${uuidv4()}${path.extname(files.programFile[0].originalname)}`;
        programUrl = await uploadToS3(files.programFile[0], filename);
      }

      const updatedCourse = {
        ...courses[index],
        ...data,
        image: imageUrl,
        programFile: programUrl,
      };

      courses[index] = updatedCourse;
      await saveCoursesToS3(courses);
      res.json({ message: "–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω", course: updatedCourse });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", err);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞" });
    }
  }
);


// === GET /courses/:id ===
app.get("/courses/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const courses = await loadCoursesFromS3();
    const course = courses.find((c) => c.id === id);
    if (!course) return res.status(404).json({ error: "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    res.json(course);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞" });
  }
});


// === POST /send-doc ===
app.post("/send-doc", async (req, res) => {
  try {
    const data = req.body;
    const outputDir = path.join(__dirname, "output");
    if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir);
    const filePath = path.join(outputDir, "temp.docx");

    await generateDocxFromTemplate(data, filePath);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "loknoi729@gmail.com",
        pass: "rrem llps evip ybmy", // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—å
      },
    });

    await transporter.sendMail({
      from: "loknoi729@gmail.com",
      to: "mycoursesask@gmail.com",
      subject: `üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç ${data.name} ‚Äì ${new Date().toLocaleDateString(
        "ru-RU"
      )}`,
      text: `–ö—É—Ä—Å: ${data.course}`,
      attachments: [{ path: filePath }],
    });

    fs.unlinkSync(filePath);
    res.json({ ok: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞" });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// === –û—Ç–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ===
app.use(express.static(path.join(__dirname, "../client/dist"))); // –ø—É—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –±–∏–ª–¥–∞
